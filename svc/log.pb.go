// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.8.0
// source: log.proto

package svc

import (
	binary "encoding/binary"
	fmt "fmt"
	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	io "io"
	math "math"
	strconv "strconv"
)

type LogLevel int32

const (
	LogLevel_DEBUG LogLevel = 0
	LogLevel_INFO  LogLevel = 1
	LogLevel_WARN  LogLevel = 2
	LogLevel_ERROR LogLevel = 3
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "DEBUG",
		1: "INFO",
		2: "WARN",
		3: "ERROR",
	}
	LogLevel_value = map[string]int32{
		"DEBUG": 0,
		"INFO":  1,
		"WARN":  2,
		"ERROR": 3,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	name, valid := LogLevel_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type LogSendRequest struct {
	unknownFields []byte
	Level         LogLevel              `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Message       string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Args          []*LogSendRequest_Arg `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *LogSendRequest) Reset() {
	*x = LogSendRequest{}
}

func (*LogSendRequest) ProtoMessage() {}

func (x *LogSendRequest) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_DEBUG
}

func (x *LogSendRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogSendRequest) GetArgs() []*LogSendRequest_Arg {
	if x != nil {
		return x.Args
	}
	return nil
}

type LogSendResponse struct {
	unknownFields []byte
}

func (x *LogSendResponse) Reset() {
	*x = LogSendResponse{}
}

func (*LogSendResponse) ProtoMessage() {}

type LogSendRequest_Arg struct {
	unknownFields []byte
	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to Value:
	//
	//	*LogSendRequest_Arg_String_
	//	*LogSendRequest_Arg_Bool
	//	*LogSendRequest_Arg_Int64
	//	*LogSendRequest_Arg_Double
	Value isLogSendRequest_Arg_Value `protobuf_oneof:"value"`
}

func (x *LogSendRequest_Arg) Reset() {
	*x = LogSendRequest_Arg{}
}

func (*LogSendRequest_Arg) ProtoMessage() {}

func (x *LogSendRequest_Arg) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *LogSendRequest_Arg) GetValue() isLogSendRequest_Arg_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LogSendRequest_Arg) GetString_() string {
	if x, ok := x.GetValue().(*LogSendRequest_Arg_String_); ok {
		return x.String_
	}
	return ""
}

func (x *LogSendRequest_Arg) GetBool() bool {
	if x, ok := x.GetValue().(*LogSendRequest_Arg_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *LogSendRequest_Arg) GetInt64() int64 {
	if x, ok := x.GetValue().(*LogSendRequest_Arg_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *LogSendRequest_Arg) GetDouble() float64 {
	if x, ok := x.GetValue().(*LogSendRequest_Arg_Double); ok {
		return x.Double
	}
	return 0
}

type isLogSendRequest_Arg_Value interface {
	isLogSendRequest_Arg_Value()
}

type LogSendRequest_Arg_String_ struct {
	String_ string `protobuf:"bytes,2,opt,name=string,proto3,oneof"`
}

type LogSendRequest_Arg_Bool struct {
	Bool bool `protobuf:"varint,3,opt,name=bool,proto3,oneof"`
}

type LogSendRequest_Arg_Int64 struct {
	Int64 int64 `protobuf:"varint,4,opt,name=int64,proto3,oneof"`
}

type LogSendRequest_Arg_Double struct {
	Double float64 `protobuf:"fixed64,5,opt,name=double,proto3,oneof"`
}

func (*LogSendRequest_Arg_String_) isLogSendRequest_Arg_Value() {}

func (*LogSendRequest_Arg_Bool) isLogSendRequest_Arg_Value() {}

func (*LogSendRequest_Arg_Int64) isLogSendRequest_Arg_Value() {}

func (*LogSendRequest_Arg_Double) isLogSendRequest_Arg_Value() {}

func (m *LogSendRequest_Arg) CloneVT() *LogSendRequest_Arg {
	if m == nil {
		return (*LogSendRequest_Arg)(nil)
	}
	r := new(LogSendRequest_Arg)
	r.Key = m.Key
	if m.Value != nil {
		r.Value = m.Value.(interface {
			CloneOneofVT() isLogSendRequest_Arg_Value
		}).CloneOneofVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *LogSendRequest_Arg) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *LogSendRequest_Arg_String_) CloneVT() *LogSendRequest_Arg_String_ {
	if m == nil {
		return (*LogSendRequest_Arg_String_)(nil)
	}
	r := new(LogSendRequest_Arg_String_)
	r.String_ = m.String_
	return r
}

func (m *LogSendRequest_Arg_String_) CloneOneofVT() isLogSendRequest_Arg_Value {
	return m.CloneVT()
}

func (m *LogSendRequest_Arg_Bool) CloneVT() *LogSendRequest_Arg_Bool {
	if m == nil {
		return (*LogSendRequest_Arg_Bool)(nil)
	}
	r := new(LogSendRequest_Arg_Bool)
	r.Bool = m.Bool
	return r
}

func (m *LogSendRequest_Arg_Bool) CloneOneofVT() isLogSendRequest_Arg_Value {
	return m.CloneVT()
}

func (m *LogSendRequest_Arg_Int64) CloneVT() *LogSendRequest_Arg_Int64 {
	if m == nil {
		return (*LogSendRequest_Arg_Int64)(nil)
	}
	r := new(LogSendRequest_Arg_Int64)
	r.Int64 = m.Int64
	return r
}

func (m *LogSendRequest_Arg_Int64) CloneOneofVT() isLogSendRequest_Arg_Value {
	return m.CloneVT()
}

func (m *LogSendRequest_Arg_Double) CloneVT() *LogSendRequest_Arg_Double {
	if m == nil {
		return (*LogSendRequest_Arg_Double)(nil)
	}
	r := new(LogSendRequest_Arg_Double)
	r.Double = m.Double
	return r
}

func (m *LogSendRequest_Arg_Double) CloneOneofVT() isLogSendRequest_Arg_Value {
	return m.CloneVT()
}

func (m *LogSendRequest) CloneVT() *LogSendRequest {
	if m == nil {
		return (*LogSendRequest)(nil)
	}
	r := new(LogSendRequest)
	r.Level = m.Level
	r.Message = m.Message
	if rhs := m.Args; rhs != nil {
		tmpContainer := make([]*LogSendRequest_Arg, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Args = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *LogSendRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *LogSendResponse) CloneVT() *LogSendResponse {
	if m == nil {
		return (*LogSendResponse)(nil)
	}
	r := new(LogSendResponse)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *LogSendResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *LogSendRequest_Arg) EqualVT(that *LogSendRequest_Arg) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Value == nil && that.Value != nil {
		return false
	} else if this.Value != nil {
		if that.Value == nil {
			return false
		}
		if !this.Value.(interface {
			EqualVT(isLogSendRequest_Arg_Value) bool
		}).EqualVT(that.Value) {
			return false
		}
	}
	if this.Key != that.Key {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *LogSendRequest_Arg) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*LogSendRequest_Arg)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *LogSendRequest_Arg_String_) EqualVT(thatIface isLogSendRequest_Arg_Value) bool {
	that, ok := thatIface.(*LogSendRequest_Arg_String_)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.String_ != that.String_ {
		return false
	}
	return true
}

func (this *LogSendRequest_Arg_Bool) EqualVT(thatIface isLogSendRequest_Arg_Value) bool {
	that, ok := thatIface.(*LogSendRequest_Arg_Bool)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Bool != that.Bool {
		return false
	}
	return true
}

func (this *LogSendRequest_Arg_Int64) EqualVT(thatIface isLogSendRequest_Arg_Value) bool {
	that, ok := thatIface.(*LogSendRequest_Arg_Int64)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Int64 != that.Int64 {
		return false
	}
	return true
}

func (this *LogSendRequest_Arg_Double) EqualVT(thatIface isLogSendRequest_Arg_Value) bool {
	that, ok := thatIface.(*LogSendRequest_Arg_Double)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if this.Double != that.Double {
		return false
	}
	return true
}

func (this *LogSendRequest) EqualVT(that *LogSendRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Level != that.Level {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	if len(this.Args) != len(that.Args) {
		return false
	}
	for i, vx := range this.Args {
		vy := that.Args[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &LogSendRequest_Arg{}
			}
			if q == nil {
				q = &LogSendRequest_Arg{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *LogSendRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*LogSendRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *LogSendResponse) EqualVT(that *LogSendResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *LogSendResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*LogSendResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the LogLevel to JSON.
func (x LogLevel) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), LogLevel_name)
}

// MarshalText marshals the LogLevel to text.
func (x LogLevel) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), LogLevel_name)), nil
}

// MarshalJSON marshals the LogLevel to JSON.
func (x LogLevel) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the LogLevel from JSON.
func (x *LogLevel) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(LogLevel_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read LogLevel enum: %v", err)
		return
	}
	*x = LogLevel(v)
}

// UnmarshalText unmarshals the LogLevel from text.
func (x *LogLevel) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), LogLevel_value)
	if err != nil {
		return err
	}
	*x = LogLevel(i)
	return nil
}

// UnmarshalJSON unmarshals the LogLevel from JSON.
func (x *LogLevel) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the LogSendRequest_Arg message to JSON.
func (x *LogSendRequest_Arg) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Key != "" || s.HasField("key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("key")
		s.WriteString(x.Key)
	}
	if x.Value != nil {
		switch ov := x.Value.(type) {
		case *LogSendRequest_Arg_String_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("string")
			s.WriteString(ov.String_)
		case *LogSendRequest_Arg_Bool:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("bool")
			s.WriteBool(ov.Bool)
		case *LogSendRequest_Arg_Int64:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("int64")
			s.WriteInt64(ov.Int64)
		case *LogSendRequest_Arg_Double:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("double")
			s.WriteFloat64(ov.Double)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the LogSendRequest_Arg to JSON.
func (x *LogSendRequest_Arg) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the LogSendRequest_Arg message from JSON.
func (x *LogSendRequest_Arg) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "key":
			s.AddField("key")
			x.Key = s.ReadString()
		case "string":
			s.AddField("string")
			ov := &LogSendRequest_Arg_String_{}
			x.Value = ov
			ov.String_ = s.ReadString()
		case "bool":
			s.AddField("bool")
			ov := &LogSendRequest_Arg_Bool{}
			x.Value = ov
			ov.Bool = s.ReadBool()
		case "int64":
			s.AddField("int64")
			ov := &LogSendRequest_Arg_Int64{}
			x.Value = ov
			ov.Int64 = s.ReadInt64()
		case "double":
			s.AddField("double")
			ov := &LogSendRequest_Arg_Double{}
			x.Value = ov
			ov.Double = s.ReadFloat64()
		}
	})
}

// UnmarshalJSON unmarshals the LogSendRequest_Arg from JSON.
func (x *LogSendRequest_Arg) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the LogSendRequest message to JSON.
func (x *LogSendRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Level != 0 || s.HasField("level") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("level")
		x.Level.MarshalProtoJSON(s)
	}
	if x.Message != "" || s.HasField("message") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("message")
		s.WriteString(x.Message)
	}
	if len(x.Args) > 0 || s.HasField("args") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("args")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Args {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("args"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the LogSendRequest to JSON.
func (x *LogSendRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the LogSendRequest message from JSON.
func (x *LogSendRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "level":
			s.AddField("level")
			x.Level.UnmarshalProtoJSON(s)
		case "message":
			s.AddField("message")
			x.Message = s.ReadString()
		case "args":
			s.AddField("args")
			if s.ReadNil() {
				x.Args = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Args = append(x.Args, nil)
					return
				}
				v := &LogSendRequest_Arg{}
				v.UnmarshalProtoJSON(s.WithField("args", false))
				if s.Err() != nil {
					return
				}
				x.Args = append(x.Args, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the LogSendRequest from JSON.
func (x *LogSendRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the LogSendResponse message to JSON.
func (x *LogSendResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the LogSendResponse to JSON.
func (x *LogSendResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the LogSendResponse message from JSON.
func (x *LogSendResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the LogSendResponse from JSON.
func (x *LogSendResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *LogSendRequest_Arg) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogSendRequest_Arg) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *LogSendRequest_Arg) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if vtmsg, ok := m.Value.(interface {
		MarshalToSizedBufferVT([]byte) (int, error)
	}); ok {
		size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogSendRequest_Arg_String_) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *LogSendRequest_Arg_String_) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.String_)
	copy(dAtA[i:], m.String_)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.String_)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *LogSendRequest_Arg_Bool) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *LogSendRequest_Arg_Bool) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Bool {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *LogSendRequest_Arg_Int64) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *LogSendRequest_Arg_Int64) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Int64))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *LogSendRequest_Arg_Double) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *LogSendRequest_Arg_Double) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 8
	binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Double))))
	i--
	dAtA[i] = 0x29
	return len(dAtA) - i, nil
}
func (m *LogSendRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogSendRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *LogSendRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Args[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Level != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LogSendResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogSendResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *LogSendResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *LogSendRequest_Arg) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if vtmsg, ok := m.Value.(interface{ SizeVT() int }); ok {
		n += vtmsg.SizeVT()
	}
	n += len(m.unknownFields)
	return n
}

func (m *LogSendRequest_Arg_String_) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.String_)
	n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	return n
}
func (m *LogSendRequest_Arg_Bool) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *LogSendRequest_Arg_Int64) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Int64))
	return n
}
func (m *LogSendRequest_Arg_Double) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *LogSendRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Level))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *LogSendResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *LogSendRequest_Arg) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogSendRequest_Arg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogSendRequest_Arg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &LogSendRequest_Arg_String_{String_: string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &LogSendRequest_Arg_Bool{Bool: b}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &LogSendRequest_Arg_Int64{Int64: v}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Double", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &LogSendRequest_Arg_Double{Double: float64(math.Float64frombits(v))}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogSendRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogSendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogSendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LogLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &LogSendRequest_Arg{})
			if err := m.Args[len(m.Args)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogSendResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogSendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogSendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
